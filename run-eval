#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Std;

my %opts = (g=>37, q=>0);
getopts('g:l:L:o:FucfB:q:s:G', \%opts);

# check path
my $exepath = $0 =~/^\S+\/[^\/\s]+/? $0 : &which($0);
my $root = $0 =~/^(\S+)\/[^\/\s]+/? $1 : undef;
$root = $exepath =~/^(\S+)\/[^\/\s]+/? $1 : undef if !defined($root);
die "ERROR: failed to locate the root directory\n" if !defined($root);

die("Usage: run [options] <test.vcf>
Options:
  -g STR      genome build: 37, 37d5 or 38 [37]
  -o STR      output prefix [auto]
  -s DIR      reference directory in SDF (for RTG vcfeval) []
  -G          evaluate genotype accuracy (effective with -s)
  -f          evaluate in functional regions only [all]
  -l INT      min INDEL length [1]
  -L INT      max INDEL length [inf]
  -B FILE     exclude errors *contained* in BED FILE [null]
  -c          exclude errors *contained* in low-complexity regions
  -u          exclude errors *contained* in the um75 mask (37d5 only)
  -F          ignore the FILTER field
  -q INT      min QUAL [$opts{q}]
") if @ARGV < 1;

# infer prefix
my $prefix;
if (defined $opts{o}) {
	$prefix = $opts{o};
} elsif ($ARGV[0] =~ /\.vcf(\.gz?)$/) {
	$prefix = $ARGV[0];
	$prefix =~ s/\.vcf(\.gz?)$//;
}
die "ERROR: failed to infer the prefix for output. Please specify -o.\n" unless defined($prefix);

# figure out the genome build
my %valid_g = ('37m'=>1, '38'=>1, '37d5'=>1);
$opts{g} =~ s/^hs//;
$opts{g} = '37' if $opts{g} eq 'hg19';
$opts{g} = '38' if $opts{g} eq 'hg38';
$opts{g} = '37m' if $opts{g} eq '37';
die "ERROR: failed to infer the genome build from hint '$opts{g}'.\n" unless $valid_g{$opts{g}};

die "ERROR: option '-u' is only applicable to -g37 or -g37d5.\n" if defined($opts{u}) && $opts{g} ne '37m' && $opts{g} ne '37d5';

# print evaluation command line
my $cmd;
my $conf_bed = defined($opts{f})? "$root/func.$opts{g}.bed.gz" : "$root/full.$opts{g}.bed.gz";
die "ERROR: failed to locate the confident region BED.\n" unless -f $conf_bed;
if (defined $opts{s}) {
	die "ERROR: failed to find the SDF directory\n" unless -d $opts{s};
	$prefix .= defined $opts{G}? ".gt" : ".al";
	$cmd = "$root/rtg RTG_MEM=4g vcfeval -t $opts{s} -b $root/full.$opts{g}.vcf.gz -c $ARGV[0] -e $conf_bed -o $prefix";
	$cmd .= " --squash-ploidy" unless defined($opts{G});
	$cmd .= "; $root/k8 $root/hapdip.js rtgeval $conf_bed $prefix > $prefix.summary";
} else {
	my $opts_hapdip = '';
	$opts_hapdip .= " -B $root/sdust30-$opts{g}.bed.gz" if defined($opts{c}); 
	$opts_hapdip .= " -B $root/um75-hs37d5.bed.gz" if defined($opts{u});
	$opts_hapdip .= " -q$opts{q}" if defined($opts{q}) && $opts{q} > 0;
	$opts_hapdip .= " -B $opts{B}" if defined($opts{B}) && -f $opts{B};
	$opts_hapdip .= " -F" if defined($opts{F});
	$opts_hapdip .= " -l $opts{l}" if defined($opts{l}) && $opts{l} > 0;
	$opts_hapdip .= " -L $opts{L}" if defined($opts{L}) && $opts{L} > 0;
	$opts_hapdip =~ s/^\s+//;
	$cmd = "$root/k8 $root/hapdip.js distEval -s $prefix.summary -b $conf_bed $opts_hapdip $root/full.$opts{g}.vcf.gz $ARGV[0] | $root/htsbox bgzip > $prefix.err.bed.gz";
}
print "$cmd\n";

sub which {
	my $file = shift;
	my $path = (@_)? shift : $ENV{PATH};
	return if (!defined($path));
	foreach my $x (split(":", $path)) {
		$x =~ s/\/$//;
		return "$x/$file" if (-x "$x/$file");
	}
	return;
}
